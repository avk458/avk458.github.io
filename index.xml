<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kano&#39;s spot</title>
    <link>https://avk458.github.io/</link>
    <description>Recent content on Kano&#39;s spot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 22 Feb 2019 02:28:47 +0800</lastBuildDate>
    
	<atom:link href="https://avk458.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java“锁”事</title>
      <link>https://avk458.github.io/posts/java%E9%94%81%E4%BA%8B/</link>
      <pubDate>Fri, 22 Feb 2019 02:28:47 +0800</pubDate>
      
      <guid>https://avk458.github.io/posts/java%E9%94%81%E4%BA%8B/</guid>
      <description>前言 Java为我们提供了种类繁多的&amp;rdquo;锁&amp;rdquo;以应对不同的使用场景，掌握了每种锁的特性可以使我们的程序在保证线程安全的情况下还拥有非常出色的效率。
1. 乐观锁和悲观锁 乐观锁和悲观锁是一种广义上的概念，体现了看待线程同步的不同角度。在Java和数据库中都有对此概念的实际应用。
从概念上来讲，悲观锁认为自己在使用同步数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加上锁，以确保数据不会被其他线程修改。
而乐观锁则相反，认为自己在使用同步数据时不会有别的线程来修改资源，只是在提交修改数据时判断数据有不有被其他线程修改过，如果没有被修改过则更新成功，如果被修改过则实现不同的操作（报错或者自旋）。
Java中乐观锁是通过无锁编程来实现的，一半采用的都是CAS算法，例如原子类中的incrementAndGet()方法。
CAS全称 Compare And Swap（比较与交换），是一种无锁算法。在不使用锁（没有线程被阻塞）的情况下实现多线程之间的变量同步。java.util.concurrent包中的原子类就是通过CAS来实现了乐观锁。
CAS算法涉及到三个操作数：
 需要读写的内存值 V。 进行比较的值 A。 要写入的新值 B。  当且仅当 V 的值等于 A 时，CAS通过原子方式用新值B来更新V的值（“比较+更新”整体是一个原子操作），否则不会执行任何操作。一般情况下，“更新”是一个不断重试的操作。
根据上述概念不难发现：
 悲观锁适合写操作多的场景，先加锁可以保证写操作时数据的准确性； 乐观锁适合读操作多的场景，不加锁的特点能够使操作的性能大幅度提升。  2. 自旋锁 我们知道Java中阻塞或者唤醒一个线程都需要操作系统切换CPU时间切片来完成，这种状态转换需要耗费处理器时间。如果代码块中的内容过于简单状态间转换所消耗的时间有可能比用户代码执行的时间还要长。
在绝大多数情况下，我们仅需要让线程稍微停顿一下，这个时候就需要自旋锁了。如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程不用阻塞而直接获取同步资源。从而避免了切换线程的开销。
自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用-XX:PreBlockSpin来更改）没有成功获得锁，就应当挂起线程。
自旋锁的实现原理同样也是CAS，AtomicInteger中调用unsafe进行自增操作的源码中的do-while循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。
3. synchronized 锁升级 从无锁到偏向锁再到轻量级锁以及最后的重量级锁，都是针对synchronized的。
先说说synchronize的能实现线程同步原理中的两个概念：对象头 和 Monitor
 对象头
 Mark Word ： 默认存储对象的HashCode，分代年龄和锁标志位信息。这些信息都是与对象自身定义无关的数据，所以Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间Mark Word里存储的数据会随着锁标志位的变化而变化。 Klass Point：对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。  Monitor 可以理解为一个同步工具或一种同步机制，通常被描述为一个对象。每一个Java对象就有一把看不见的锁，称为内部锁或者Monitor锁。Monitor是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联，同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。
  synchronized通过Monitor来实现线程同步，Monitor是依赖于底层的操作系统的Mutex Lock 互斥锁来实现的线程同步。
上文在自旋锁中提到的“阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长”。这种方式就是synchronized最初实现同步的方式，这就是JDK 6之前synchronized效率低的原因。这种依赖于操作系统Mutex Lock所实现的锁我们称之为“重量级锁”，JDK 6中为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”。
所以目前锁一共有4种状态，级别从低到高依次是：无锁、偏向锁、轻量级锁和重量级锁。锁状态只能升级不能降级。</description>
    </item>
    
    <item>
      <title>The &#34;figure&#34; Shortcode</title>
      <link>https://avk458.github.io/posts/the-figure-shortcode/</link>
      <pubDate>Mon, 24 Dec 2018 12:29:41 +0800</pubDate>
      
      <guid>https://avk458.github.io/posts/the-figure-shortcode/</guid>
      <description>Hugo has figure shortcode built in, so you can easily add figcaptions or hyperlink rel attributes to images. Documentations can be found here:
https://gohugo.io/content-management/shortcodes/#figure
This theme has 3 CSS classes made for figure elements:
 big: images will break the width limit of main content area. left: images will float to the left. right: images will float to the right.  If a figure has no class set, the image will behave just like a normal markdown image: !</description>
    </item>
    
    <item>
      <title>Post With Featured Image</title>
      <link>https://avk458.github.io/posts/post-with-featured-image/</link>
      <pubDate>Mon, 01 Oct 2018 16:15:09 +0800</pubDate>
      
      <guid>https://avk458.github.io/posts/post-with-featured-image/</guid>
      <description>Just define the image URL in the content’s front matter, the featured image will be displayed as the background.
For example:
---images:-https://picsum.photos/1024/768/?random--- This is an array, you can set multiple urls, only the first url will be used. These images is also used in Twitter Cards and the Open Graph metadata.</description>
    </item>
    
    <item>
      <title>Typography</title>
      <link>https://avk458.github.io/posts/typography/</link>
      <pubDate>Sat, 29 Sep 2018 11:36:33 +0800</pubDate>
      
      <guid>https://avk458.github.io/posts/typography/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://avk458.github.io/about-hugo/</link>
      <pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://avk458.github.io/about-hugo/</guid>
      <description>Hugo is the world’s fastest framework for building websites. It is written in Go.
It makes use of a variety of open source projects including:
 https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Learn more and contribute on GitHub.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://avk458.github.io/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://avk458.github.io/posts/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://avk458.github.io/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://avk458.github.io/posts/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://avk458.github.io/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://avk458.github.io/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://avk458.github.io/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://avk458.github.io/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
  </channel>
</rss>